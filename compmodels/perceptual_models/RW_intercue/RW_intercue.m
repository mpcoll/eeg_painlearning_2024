function [traj, infStates] = RW_intercue(r, p, varargin)
% MODIFIED HGF TOOLBOX FUNCTION BY MP COLL, 2019 for FEAR COND EXPERIMENT

% Calculates the trajectories of v under the Rescorla-Wagner learning model
%
% This function can be called in two ways:
%
% (1) tapas_rw_binary(r, p)
%
%     where r is the structure generated by tapas_fitModel and p is the parameter vector in native space;
%
% (2) tapas_rw_binary(r, ptrans, 'trans')
%
%     where r is the structure generated by tapas_fitModel, ptrans is the parameter vector in
%     transformed space, and 'trans' is a flag indicating this.
%
% --------------------------------------------------------------------------------------------------
% Copyright (C) 2012-2013 Christoph Mathys, TNU, UZH & ETHZ
%
% This file is part of the HGF toolbox, which is released under the terms of the GNU General Public
% Licence (GPL), version 3. You can redistribute it and/or modify it under the terms of the GPL
% (either version 3 or, at your option, any later version). For further details, see the file
% COPYING or <http://www.gnu.org/licenses/>.

% Transform paramaters back to their native space if needed
if ~isempty(varargin) && strcmp(varargin{1},'trans')
    p = RW_intercue_transp(r, p);
end

% Unpack parameters
start_val = p(1);
alpha  = p(2);

% DO NOT Add dummy "zeroth" trial
d.shock = r.u(:,1);

% Get cue presented
d.cuenum = r.u(:, 2);

% Number of cues (or # of independent HGF)
nc = max(d.cuenum);
d.trials = length(d.cuenum);

% Initiate trajectories


for i = 1:nc
    pred.cue(i).v = start_val;
    seencues(i) = 0; % Init array of seen cues with 0
end

for t = 1:d.trials% Loop trials

    % Find cue presented
    cue = d.cuenum(t);

    % Get cues not presented
    othercues = 1:max(d.cuenum);
    othercues(cue) = [];

    % Mark current cue as seen
    seencues(cue) = 1;

    % RW model with 1 LR

    vc = pred.cue(cue).v ; % Get current expectation, take out for brievty
    pe_presented(t) = d.shock(t) - vc; % calculate pe
    nvc = vc + alpha * pe_presented(t); % Get updated expectancy
    expect(t) = vc; % Store in data frame
    pred.cue(cue).v = nvc; % Store for this cue

    if d.shock(t)% Update others only if shock because no shock is not informative of other cues???
        % Update seen but not presented cues (NOT SURE)
        for o = othercues% Loop all unpresented cue
            if seencues(o) == 1% Update only seen cues
                pe_unpresented(t, o) = not(d.shock(t)) - pred.cue(o).v; % calculate pe
                % Get updated expectancy
                pred.cue(o).v = pred.cue(o).v + alpha * pe_unpresented(t, o); % Store for this cue
            end

        end
    end

end


% Create matrix (in this case: vector) needed by observation model
traj.v = expect';
traj.da1 = pe_presented';
traj.vhat = expect';
traj.da2 = pe_unpresented';
infStates = expect';

return;
